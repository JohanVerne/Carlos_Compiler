COMMENTS: // Complex Carlos program to test lexer and parser at [1, 0]
COMMENTS: // Global constant at [3, 0]
CONST: const at [4, 0]
IDENTIFIER: languageName at [4, 6]
EQUAL: = at [4, 19]
STRING_LITERAL: "Carlos" at [4, 21]
SEMICOLON: ; at [4, 29]
COMMENTS: // Structure declaration using 'struct' and fields at [6, 0]
STRUCT: struct at [7, 0]
IDENTIFIER: Vector at [7, 7]
LBRACE: { at [7, 14]
IDENTIFIER: x at [8, 2]
COLON: : at [8, 3]
FLOAT: float at [8, 5]
IDENTIFIER: y at [9, 2]
COLON: : at [9, 3]
FLOAT: float at [9, 5]
IDENTIFIER: label at [10, 2]
COLON: : at [10, 7]
STRING: string at [10, 9]
RBRACE: } at [11, 0]
COMMENTS: // Function that acts as a constructor for Vector at [13, 0]
FUNCTION: function at [14, 0]
IDENTIFIER: newVector at [14, 9]
LPAREN: ( at [14, 18]
IDENTIFIER: x at [14, 19]
COLON: : at [14, 20]
FLOAT: float at [14, 22]
COMMA: , at [14, 27]
IDENTIFIER: y at [14, 29]
COLON: : at [14, 30]
FLOAT: float at [14, 32]
COMMA: , at [14, 37]
IDENTIFIER: label at [14, 39]
COLON: : at [14, 44]
STRING: string at [14, 46]
RPAREN: ) at [14, 52]
COLON: : at [14, 53]
IDENTIFIER: Vector at [14, 55]
LBRACE: { at [14, 62]
COMMENTS: // Create and return a new Vector instance at [15, 2]
RETURN: return at [16, 2]
IDENTIFIER: Vector at [16, 9]
LPAREN: ( at [16, 15]
IDENTIFIER: x at [16, 16]
COMMA: , at [16, 17]
IDENTIFIER: y at [16, 19]
COMMA: , at [16, 20]
IDENTIFIER: label at [16, 22]
RPAREN: ) at [16, 27]
SEMICOLON: ; at [16, 28]
RBRACE: } at [17, 0]
COMMENTS: // Compute the magnitude (length) of a Vector using arithmetic and function calls. at [19, 0]
FUNCTION: function at [20, 0]
IDENTIFIER: magnitude at [20, 9]
LPAREN: ( at [20, 18]
IDENTIFIER: v at [20, 19]
COLON: : at [20, 20]
IDENTIFIER: Vector at [20, 22]
RPAREN: ) at [20, 28]
COLON: : at [20, 29]
FLOAT: float at [20, 31]
LBRACE: { at [20, 37]
RETURN: return at [21, 2]
SQRT: sqrt at [21, 9]
LPAREN: ( at [21, 13]
IDENTIFIER: v at [21, 14]
DOT: . at [21, 15]
IDENTIFIER: x at [21, 16]
MULTIPLICATION: * at [21, 18]
IDENTIFIER: v at [21, 20]
DOT: . at [21, 21]
IDENTIFIER: x at [21, 22]
PLUS: + at [21, 24]
IDENTIFIER: v at [21, 26]
DOT: . at [21, 27]
IDENTIFIER: y at [21, 28]
MULTIPLICATION: * at [21, 30]
IDENTIFIER: v at [21, 32]
DOT: . at [21, 33]
IDENTIFIER: y at [21, 34]
RPAREN: ) at [21, 35]
SEMICOLON: ; at [21, 36]
RBRACE: } at [22, 0]
COMMENTS: // Function to scale a vector by a factor and return a new instance at [24, 0]
FUNCTION: function at [25, 0]
IDENTIFIER: scaleVector at [25, 9]
LPAREN: ( at [25, 20]
IDENTIFIER: v at [25, 21]
COLON: : at [25, 22]
IDENTIFIER: Vector at [25, 24]
COMMA: , at [25, 30]
IDENTIFIER: factor at [25, 32]
COLON: : at [25, 38]
FLOAT: float at [25, 40]
RPAREN: ) at [25, 45]
COLON: : at [25, 46]
IDENTIFIER: Vector at [25, 48]
LBRACE: { at [25, 55]
LET: let at [26, 2]
IDENTIFIER: newX at [26, 6]
EQUAL: = at [26, 11]
IDENTIFIER: v at [26, 13]
DOT: . at [26, 14]
IDENTIFIER: x at [26, 15]
MULTIPLICATION: * at [26, 17]
IDENTIFIER: factor at [26, 19]
SEMICOLON: ; at [26, 25]
LET: let at [27, 2]
IDENTIFIER: newY at [27, 6]
EQUAL: = at [27, 11]
IDENTIFIER: v at [27, 13]
DOT: . at [27, 14]
IDENTIFIER: y at [27, 15]
MULTIPLICATION: * at [27, 17]
IDENTIFIER: factor at [27, 19]
SEMICOLON: ; at [27, 25]
RETURN: return at [28, 2]
IDENTIFIER: Vector at [28, 9]
LPAREN: ( at [28, 15]
IDENTIFIER: newX at [28, 16]
COMMA: , at [28, 20]
IDENTIFIER: newY at [28, 22]
COMMA: , at [28, 26]
IDENTIFIER: v at [28, 28]
DOT: . at [28, 29]
IDENTIFIER: label at [28, 30]
RPAREN: ) at [28, 35]
SEMICOLON: ; at [28, 36]
RBRACE: } at [29, 0]
COMMENTS: // Function that demonstrates the use of optionals at [31, 0]
FUNCTION: function at [32, 0]
IDENTIFIER: testOptional at [32, 9]
LPAREN: ( at [32, 21]
IDENTIFIER: flag at [32, 22]
COLON: : at [32, 26]
BOOLEAN: boolean at [32, 28]
RPAREN: ) at [32, 35]
COLON: : at [32, 36]
INT: int at [32, 38]
QUESTION_MARK: ? at [32, 41]
LBRACE: { at [32, 43]
IF: if at [33, 2]
IDENTIFIER: flag at [33, 5]
LBRACE: { at [33, 10]
COMMENTS: // Create an optional containing 42 at [34, 4]
RETURN: return at [35, 4]
SOME: some at [35, 11]
FLOAT_LITERAL: 42 at [35, 16]
SEMICOLON: ; at [35, 18]
RBRACE: } at [36, 2]
ELSE: else at [37, 2]
LBRACE: { at [37, 7]
COMMENTS: // Return an empty optional for type int? at [38, 4]
RETURN: return at [39, 4]
NO: no at [39, 11]
INT: int at [39, 14]
SEMICOLON: ; at [39, 17]
RBRACE: } at [40, 2]
RBRACE: } at [41, 0]
COMMENTS: // Function to process an array of integers using a for-range loop and the '#' operator for array length at [43, 0]
FUNCTION: function at [44, 0]
IDENTIFIER: processArray at [44, 9]
LPAREN: ( at [44, 21]
IDENTIFIER: a at [44, 22]
COLON: : at [44, 23]
LBRACKET: [ at [44, 25]
INT: int at [44, 26]
RBRACKET: ] at [44, 29]
RPAREN: ) at [44, 30]
COLON: : at [44, 31]
INT: int at [44, 33]
LBRACE: { at [44, 37]
LET: let at [45, 2]
IDENTIFIER: sum at [45, 6]
EQUAL: = at [45, 10]
FLOAT_LITERAL: 0 at [45, 12]
SEMICOLON: ; at [45, 13]
COMMENTS: // '0 ..<' loop: iterate from 0 inclusive to the length of the array exclusive at [46, 2]
FOR: for at [47, 2]
IDENTIFIER: i at [47, 6]
IN: in at [47, 8]
FLOAT_LITERAL: 0 at [47, 11]
EXCLUSIVE_RANGE: ..< at [47, 13]
LENGTH: # at [47, 17]
IDENTIFIER: a at [47, 18]
LBRACE: { at [47, 20]
IDENTIFIER: sum at [48, 4]
EQUAL: = at [48, 8]
IDENTIFIER: sum at [48, 10]
PLUS: + at [48, 14]
IDENTIFIER: a at [48, 16]
LBRACKET: [ at [48, 17]
IDENTIFIER: i at [48, 18]
RBRACKET: ] at [48, 19]
SEMICOLON: ; at [48, 20]
RBRACE: } at [49, 2]
RETURN: return at [50, 2]
IDENTIFIER: sum at [50, 9]
SEMICOLON: ; at [50, 12]
RBRACE: } at [51, 0]
COMMENTS: // Function demonstrating a conditional (ternary) operator within an expression at [53, 0]
FUNCTION: function at [54, 0]
STRING: string at [54, 9]
IDENTIFIER: Fun at [54, 15]
LPAREN: ( at [54, 18]
IDENTIFIER: s at [54, 19]
COLON: : at [54, 20]
STRING: string at [54, 22]
RPAREN: ) at [54, 28]
COLON: : at [54, 29]
STRING: string at [54, 31]
LBRACE: { at [54, 38]
LET: let at [55, 2]
IDENTIFIER: result at [55, 6]
EQUAL: = at [55, 13]
STRING_LITERAL: "" at [55, 15]
SEMICOLON: ; at [55, 17]
COMMENTS: // Convert the string to codepoints then create a new string based on parity of the codepoint values. at [56, 2]
LET: let at [57, 2]
IDENTIFIER: cp at [57, 6]
EQUAL: = at [57, 9]
CODEPOINTS: codepoints at [57, 11]
LPAREN: ( at [57, 21]
IDENTIFIER: s at [57, 22]
RPAREN: ) at [57, 23]
SEMICOLON: ; at [57, 24]
COMMENTS: // Iterate over the codepoints with a for-each loop on a collection at [58, 2]
FOR: for at [59, 2]
IDENTIFIER: cpVal at [59, 6]
IN: in at [59, 12]
IDENTIFIER: cp at [59, 15]
LBRACE: { at [59, 18]
COMMENTS: // Using the conditional operator: if cpVal modulo 2 equals 0, append "E", else "O" at [60, 4]
IDENTIFIER: result at [61, 4]
EQUAL: = at [61, 11]
IDENTIFIER: result at [61, 13]
PLUS: + at [61, 20]
LPAREN: ( at [61, 22]
LPAREN: ( at [61, 24]
IDENTIFIER: cpVal at [61, 25]
MODULO: % at [61, 31]
FLOAT_LITERAL: 2 at [61, 33]
IS_EQUAL: == at [61, 35]
FLOAT_LITERAL: 0 at [61, 38]
RPAREN: ) at [61, 39]
QUESTION_MARK: ? at [61, 41]
STRING_LITERAL: "E" at [61, 43]
COLON: : at [61, 47]
STRING_LITERAL: "O" at [61, 49]
RPAREN: ) at [61, 53]
SEMICOLON: ; at [61, 54]
RBRACE: } at [62, 2]
RETURN: return at [63, 2]
IDENTIFIER: result at [63, 9]
SEMICOLON: ; at [63, 15]
RBRACE: } at [64, 0]
COMMENTS: // Function using various logical operators (&&, ||, !) and comparisons at [66, 0]
FUNCTION: function at [67, 0]
IDENTIFIER: complexCondition at [67, 9]
LPAREN: ( at [67, 25]
IDENTIFIER: a at [67, 26]
COLON: : at [67, 27]
INT: int at [67, 29]
COMMA: , at [67, 32]
IDENTIFIER: b at [67, 34]
COLON: : at [67, 35]
INT: int at [67, 37]
RPAREN: ) at [67, 40]
COLON: : at [67, 41]
BOOLEAN: boolean at [67, 43]
LBRACE: { at [67, 51]
IF: if at [68, 2]
LPAREN: ( at [68, 5]
IDENTIFIER: a at [68, 6]
LESS_THAN: < at [68, 8]
IDENTIFIER: b at [68, 10]
BITWISE_AND: & at [68, 12]
BITWISE_AND: & at [68, 13]
IDENTIFIER: a at [68, 15]
IS_NOT_EQUAL: != at [68, 17]
FLOAT_LITERAL: 0 at [68, 20]
RPAREN: ) at [68, 21]
LBRACE: { at [68, 23]
RETURN: return at [69, 4]
TRUE: true at [69, 11]
SEMICOLON: ; at [69, 15]
RBRACE: } at [70, 2]
ELSE: else at [71, 2]
IF: if at [71, 7]
LPAREN: ( at [71, 10]
IDENTIFIER: a at [71, 11]
IS_EQUAL: == at [71, 13]
IDENTIFIER: b at [71, 16]
RPAREN: ) at [71, 17]
LBRACE: { at [71, 19]
RETURN: return at [72, 4]
FALSE: false at [72, 11]
SEMICOLON: ; at [72, 16]
RBRACE: } at [73, 2]
ELSE: else at [74, 2]
LBRACE: { at [74, 7]
COMMENTS: // Use the logical not operator '!' at [75, 4]
RETURN: return at [76, 4]
NOT: ! at [76, 11]
FALSE: false at [76, 12]
SEMICOLON: ; at [76, 17]
RBRACE: } at [77, 2]
RBRACE: } at [78, 0]
COMMENTS: // Demonstrate control structures: while loop and repeat loop. at [80, 0]
FUNCTION: function at [81, 0]
IDENTIFIER: loopDemo at [81, 9]
LPAREN: ( at [81, 17]
IDENTIFIER: n at [81, 18]
COLON: : at [81, 19]
INT: int at [81, 21]
RPAREN: ) at [81, 24]
COLON: : at [81, 25]
VOID: void at [81, 27]
LBRACE: { at [81, 32]
LET: let at [82, 2]
IDENTIFIER: counter at [82, 6]
EQUAL: = at [82, 14]
IDENTIFIER: n at [82, 16]
SEMICOLON: ; at [82, 17]
COMMENTS: // While loop with decrement operator (--) on mutable variable 'counter' at [83, 2]
WHILE: while at [84, 2]
IDENTIFIER: counter at [84, 8]
GREATER_THAN: > at [84, 16]
FLOAT_LITERAL: 0 at [84, 18]
LBRACE: { at [84, 20]
PRINT: print at [85, 4]
LPAREN: ( at [85, 9]
STRING_LITERAL: "Counter: " at [85, 10]
PLUS: + at [85, 22]
IDENTIFIER: counter at [85, 24]
RPAREN: ) at [85, 31]
SEMICOLON: ; at [85, 32]
IDENTIFIER: counter at [86, 4]
MINUS: - at [86, 11]
MINUS: - at [86, 12]
SEMICOLON: ; at [86, 13]
RBRACE: } at [87, 2]
COMMENTS: // Repeat loop that executes a fixed number of times at [88, 2]
REPEAT: repeat at [89, 2]
FLOAT_LITERAL: 3 at [89, 9]
LBRACE: { at [89, 11]
PRINT: print at [90, 4]
LPAREN: ( at [90, 9]
STRING_LITERAL: "Repeat loop iteration" at [90, 10]
RPAREN: ) at [90, 33]
SEMICOLON: ; at [90, 34]
RBRACE: } at [91, 2]
RBRACE: } at [92, 0]
COMMENTS: // Function to illustrate different range iterations using the 'for' loop with range operators. at [94, 0]
FUNCTION: function at [95, 0]
IDENTIFIER: rangeDemo at [95, 9]
LPAREN: ( at [95, 18]
IDENTIFIER: start at [95, 19]
COLON: : at [95, 24]
INT: int at [95, 26]
COMMA: , at [95, 29]
IDENTIFIER: end at [95, 31]
COLON: : at [95, 34]
INT: int at [95, 36]
RPAREN: ) at [95, 39]
COLON: : at [95, 40]
VOID: void at [95, 42]
LBRACE: { at [95, 47]
COMMENTS: // Through-range loop using "..." (inclusive range) at [96, 2]
FOR: for at [97, 2]
IDENTIFIER: i at [97, 6]
IN: in at [97, 8]
IDENTIFIER: start at [97, 11]
INCLUSIVE_RANGE: ... at [97, 17]
IDENTIFIER: end at [97, 21]
LBRACE: { at [97, 25]
IF: if at [98, 4]
IDENTIFIER: i at [98, 7]
MODULO: % at [98, 9]
FLOAT_LITERAL: 2 at [98, 11]
IS_EQUAL: == at [98, 13]
FLOAT_LITERAL: 0 at [98, 16]
LBRACE: { at [98, 18]
PRINT: print at [99, 6]
LPAREN: ( at [99, 11]
STRING_LITERAL: "Even: " at [99, 12]
PLUS: + at [99, 21]
IDENTIFIER: i at [99, 23]
RPAREN: ) at [99, 24]
SEMICOLON: ; at [99, 25]
RBRACE: } at [100, 4]
ELSE: else at [101, 4]
LBRACE: { at [101, 9]
PRINT: print at [102, 6]
LPAREN: ( at [102, 11]
STRING_LITERAL: "Odd: " at [102, 12]
PLUS: + at [102, 20]
IDENTIFIER: i at [102, 22]
RPAREN: ) at [102, 23]
SEMICOLON: ; at [102, 24]
RBRACE: } at [103, 4]
RBRACE: } at [104, 2]
RBRACE: } at [105, 0]
COMMENTS: // Function to show an if statement with a single return statement. at [107, 0]
FUNCTION: function at [108, 0]
IDENTIFIER: branchDemo at [108, 9]
LPAREN: ( at [108, 19]
IDENTIFIER: x at [108, 20]
COLON: : at [108, 21]
INT: int at [108, 23]
RPAREN: ) at [108, 26]
COLON: : at [108, 27]
INT: int at [108, 29]
LBRACE: { at [108, 33]
IF: if at [109, 2]
IDENTIFIER: x at [109, 5]
GREATER_THAN: > at [109, 7]
FLOAT_LITERAL: 100 at [109, 9]
LBRACE: { at [109, 13]
RETURN: return at [110, 4]
IDENTIFIER: x at [110, 11]
MINUS: - at [110, 13]
FLOAT_LITERAL: 100 at [110, 15]
SEMICOLON: ; at [110, 18]
RBRACE: } at [111, 2]
RETURN: return at [112, 2]
IDENTIFIER: x at [112, 9]
PLUS: + at [112, 11]
FLOAT_LITERAL: 100 at [112, 13]
SEMICOLON: ; at [112, 16]
RBRACE: } at [113, 0]
COMMENTS: // Function that uses break within a for-each loop. at [115, 0]
FUNCTION: function at [116, 0]
BREAK: break at [116, 9]
IDENTIFIER: Demo at [116, 14]
LPAREN: ( at [116, 18]
IDENTIFIER: arr at [116, 19]
COLON: : at [116, 22]
LBRACKET: [ at [116, 24]
INT: int at [116, 25]
RBRACKET: ] at [116, 28]
RPAREN: ) at [116, 29]
COLON: : at [116, 30]
INT: int at [116, 32]
LBRACE: { at [116, 36]
LET: let at [117, 2]
IDENTIFIER: total at [117, 6]
EQUAL: = at [117, 12]
FLOAT_LITERAL: 0 at [117, 14]
SEMICOLON: ; at [117, 15]
FOR: for at [118, 2]
IDENTIFIER: x at [118, 6]
IN: in at [118, 8]
IDENTIFIER: arr at [118, 11]
LBRACE: { at [118, 15]
IF: if at [119, 4]
IDENTIFIER: x at [119, 7]
GREATER_THAN: > at [119, 9]
FLOAT_LITERAL: 50 at [119, 11]
LBRACE: { at [119, 14]
BREAK: break at [120, 6]
SEMICOLON: ; at [120, 11]
RBRACE: } at [121, 4]
IDENTIFIER: total at [122, 4]
EQUAL: = at [122, 10]
IDENTIFIER: total at [122, 12]
PLUS: + at [122, 18]
IDENTIFIER: x at [122, 20]
SEMICOLON: ; at [122, 21]
RBRACE: } at [123, 2]
RETURN: return at [124, 2]
IDENTIFIER: total at [124, 9]
SEMICOLON: ; at [124, 14]
RBRACE: } at [125, 0]
COMMENTS: // Demonstrate bitwise operations and shifting operators at [127, 0]
FUNCTION: function at [128, 0]
IDENTIFIER: bitwiseDemo at [128, 9]
LPAREN: ( at [128, 20]
IDENTIFIER: x at [128, 21]
COLON: : at [128, 22]
INT: int at [128, 24]
COMMA: , at [128, 27]
IDENTIFIER: y at [128, 29]
COLON: : at [128, 30]
INT: int at [128, 32]
RPAREN: ) at [128, 35]
COLON: : at [128, 36]
INT: int at [128, 38]
LBRACE: { at [128, 42]
COMMENTS: // Uses <<, >>, &, |, ^ in one expression. Parentheses ensure proper precedence. at [129, 2]
RETURN: return at [130, 2]
LPAREN: ( at [130, 9]
LPAREN: ( at [130, 10]
IDENTIFIER: x at [130, 11]
LESS_THAN: < at [130, 13]
LESS_THAN: < at [130, 14]
FLOAT_LITERAL: 1 at [130, 16]
RPAREN: ) at [130, 17]
PLUS: + at [130, 19]
LPAREN: ( at [130, 21]
IDENTIFIER: y at [130, 22]
GREATER_THAN: > at [130, 24]
GREATER_THAN: > at [130, 25]
FLOAT_LITERAL: 1 at [130, 27]
RPAREN: ) at [130, 28]
RPAREN: ) at [130, 29]
BITWISE_AND: & at [130, 31]
LPAREN: ( at [130, 33]
IDENTIFIER: x at [130, 34]
BITWISE_XOR: ^ at [130, 36]
IDENTIFIER: y at [130, 38]
RPAREN: ) at [130, 39]
BITWISE_OR: | at [130, 41]
LPAREN: ( at [130, 43]
IDENTIFIER: x at [130, 44]
BITWISE_AND: & at [130, 46]
IDENTIFIER: y at [130, 48]
RPAREN: ) at [130, 49]
SEMICOLON: ; at [130, 50]
RBRACE: } at [131, 0]
COMMENTS: // Main block: begins a new scope with its own block. at [133, 0]
LBRACE: { at [134, 0]
COMMENTS: // Print a greeting with the global constant. at [135, 2]
PRINT: print at [136, 2]
LPAREN: ( at [136, 7]
STRING_LITERAL: "Testing language: " at [136, 8]
PLUS: + at [136, 29]
IDENTIFIER: languageName at [136, 31]
RPAREN: ) at [136, 43]
SEMICOLON: ; at [136, 44]
COMMENTS: // Create a new Vector and test functions operating on it. at [138, 2]
LET: let at [139, 2]
IDENTIFIER: vec at [139, 6]
EQUAL: = at [139, 10]
IDENTIFIER: newVector at [139, 12]
LPAREN: ( at [139, 21]
FLOAT_LITERAL: 3.0 at [139, 22]
COMMA: , at [139, 25]
FLOAT_LITERAL: 4.0 at [139, 27]
COMMA: , at [139, 30]
STRING_LITERAL: "A" at [139, 32]
RPAREN: ) at [139, 35]
SEMICOLON: ; at [139, 36]
PRINT: print at [140, 2]
LPAREN: ( at [140, 7]
STRING_LITERAL: "Vector magnitude: " at [140, 8]
PLUS: + at [140, 29]
IDENTIFIER: magnitude at [140, 31]
LPAREN: ( at [140, 40]
IDENTIFIER: vec at [140, 41]
RPAREN: ) at [140, 44]
RPAREN: ) at [140, 45]
SEMICOLON: ; at [140, 46]
LET: let at [142, 2]
IDENTIFIER: scaled at [142, 6]
EQUAL: = at [142, 13]
IDENTIFIER: scaleVector at [142, 15]
LPAREN: ( at [142, 26]
IDENTIFIER: vec at [142, 27]
COMMA: , at [142, 30]
FLOAT_LITERAL: 2.5 at [142, 32]
RPAREN: ) at [142, 35]
SEMICOLON: ; at [142, 36]
PRINT: print at [143, 2]
LPAREN: ( at [143, 7]
STRING_LITERAL: "Scaled vector magnitude: " at [143, 8]
PLUS: + at [143, 36]
IDENTIFIER: magnitude at [143, 38]
LPAREN: ( at [143, 47]
IDENTIFIER: scaled at [143, 48]
RPAREN: ) at [143, 54]
RPAREN: ) at [143, 55]
SEMICOLON: ; at [143, 56]
COMMENTS: // Test optionals using the '??' operator to unwrap with a default value. at [145, 2]
LET: let at [146, 2]
IDENTIFIER: opt at [146, 6]
EQUAL: = at [146, 10]
IDENTIFIER: testOptional at [146, 12]
LPAREN: ( at [146, 24]
TRUE: true at [146, 25]
RPAREN: ) at [146, 29]
SEMICOLON: ; at [146, 30]
PRINT: print at [147, 2]
LPAREN: ( at [147, 7]
STRING_LITERAL: "Optional value: " at [147, 8]
PLUS: + at [147, 27]
LPAREN: ( at [147, 29]
IDENTIFIER: opt at [147, 30]
DOUBLE_QUESTION_MARK: ?? at [147, 34]
FLOAT_LITERAL: -1 at [147, 37]
RPAREN: ) at [147, 39]
RPAREN: ) at [147, 40]
SEMICOLON: ; at [147, 41]
COMMENTS: // Process an array literal and output its sum. at [149, 2]
LET: let at [150, 2]
IDENTIFIER: arrSum at [150, 6]
EQUAL: = at [150, 13]
IDENTIFIER: processArray at [150, 15]
LPAREN: ( at [150, 27]
LBRACKET: [ at [150, 28]
FLOAT_LITERAL: 10 at [150, 29]
COMMA: , at [150, 31]
FLOAT_LITERAL: 20 at [150, 33]
COMMA: , at [150, 35]
FLOAT_LITERAL: 30 at [150, 37]
COMMA: , at [150, 39]
FLOAT_LITERAL: 40 at [150, 41]
RBRACKET: ] at [150, 43]
RPAREN: ) at [150, 44]
SEMICOLON: ; at [150, 45]
PRINT: print at [151, 2]
LPAREN: ( at [151, 7]
STRING_LITERAL: "Sum of array: " at [151, 8]
PLUS: + at [151, 25]
IDENTIFIER: arrSum at [151, 27]
RPAREN: ) at [151, 33]
SEMICOLON: ; at [151, 34]
COMMENTS: // Use the string function with Unicode characters. at [153, 2]
PRINT: print at [154, 2]
LPAREN: ( at [154, 7]
STRING: string at [154, 8]
IDENTIFIER: Fun at [154, 14]
LPAREN: ( at [154, 17]
STRING_LITERAL: "Hello, 世界" at [154, 18]
RPAREN: ) at [154, 29]
RPAREN: ) at [154, 30]
SEMICOLON: ; at [154, 31]
COMMENTS: // Demonstrate loops. at [156, 2]
IDENTIFIER: loopDemo at [157, 2]
LPAREN: ( at [157, 10]
FLOAT_LITERAL: 5 at [157, 11]
RPAREN: ) at [157, 12]
SEMICOLON: ; at [157, 13]
IDENTIFIER: rangeDemo at [158, 2]
LPAREN: ( at [158, 11]
FLOAT_LITERAL: 1 at [158, 12]
COMMA: , at [158, 13]
FLOAT_LITERAL: 10 at [158, 15]
RPAREN: ) at [158, 17]
SEMICOLON: ; at [158, 18]
COMMENTS: // Test branch function. at [160, 2]
PRINT: print at [161, 2]
LPAREN: ( at [161, 7]
STRING_LITERAL: "Branch demo: " at [161, 8]
PLUS: + at [161, 24]
IDENTIFIER: branchDemo at [161, 26]
LPAREN: ( at [161, 36]
FLOAT_LITERAL: 50 at [161, 37]
RPAREN: ) at [161, 39]
RPAREN: ) at [161, 40]
SEMICOLON: ; at [161, 41]
COMMENTS: // Test the break statement in a loop. at [163, 2]
PRINT: print at [164, 2]
LPAREN: ( at [164, 7]
STRING_LITERAL: "Break demo: " at [164, 8]
PLUS: + at [164, 23]
BREAK: break at [164, 25]
IDENTIFIER: Demo at [164, 30]
LPAREN: ( at [164, 34]
LBRACKET: [ at [164, 35]
FLOAT_LITERAL: 5 at [164, 36]
COMMA: , at [164, 37]
FLOAT_LITERAL: 10 at [164, 39]
COMMA: , at [164, 41]
FLOAT_LITERAL: 55 at [164, 43]
COMMA: , at [164, 45]
FLOAT_LITERAL: 20 at [164, 47]
RBRACKET: ] at [164, 49]
RPAREN: ) at [164, 50]
RPAREN: ) at [164, 51]
SEMICOLON: ; at [164, 52]
COMMENTS: // Display result from bitwise operations. at [166, 2]
PRINT: print at [167, 2]
LPAREN: ( at [167, 7]
STRING_LITERAL: "Bitwise demo: " at [167, 8]
PLUS: + at [167, 25]
IDENTIFIER: bitwiseDemo at [167, 27]
LPAREN: ( at [167, 38]
FLOAT_LITERAL: 12 at [167, 39]
COMMA: , at [167, 41]
FLOAT_LITERAL: 5 at [167, 43]
RPAREN: ) at [167, 44]
RPAREN: ) at [167, 45]
SEMICOLON: ; at [167, 46]
RBRACE: } at [168, 0]
EOF:  at [169, 0]
