FUNCTION: function at [1, 0]
IDENTIFIER: f at [1, 9]
LPAREN: ( at [1, 10]
RPAREN: ) at [1, 11]
LBRACE: { at [1, 13]
LET: let at [2, 0]
IDENTIFIER: x at [2, 4]
EQUAL: = at [2, 6]
FLOAT_LITERAL: 3 at [2, 8]
SEMICOLON: ; at [2, 9]
IF: if at [3, 0]
LPAREN: ( at [3, 3]
IDENTIFIER: x at [3, 4]
LESS_THAN: < at [3, 6]
FLOAT_LITERAL: 0 at [3, 8]
RPAREN: ) at [3, 9]
LBRACE: { at [3, 11]
PRINT: print at [4, 2]
LPAREN: ( at [4, 7]
IDENTIFIER: x at [4, 8]
RPAREN: ) at [4, 9]
SEMICOLON: ; at [4, 10]
RBRACE: } at [5, 0]
ELSE: else at [5, 2]
IF: if at [5, 7]
LPAREN: ( at [5, 10]
IDENTIFIER: x at [5, 11]
GREATER_THAN: > at [5, 13]
FLOAT_LITERAL: 5 at [5, 15]
RPAREN: ) at [5, 16]
LBRACE: { at [5, 18]
PRINT: print at [6, 2]
LPAREN: ( at [6, 7]
STRING_LITERAL: "Oh no" at [6, 8]
RPAREN: ) at [6, 15]
SEMICOLON: ; at [6, 16]
RBRACE: } at [7, 0]
ELSE: else at [7, 2]
LBRACE: { at [7, 7]
PRINT: print at [8, 2]
LPAREN: ( at [8, 7]
STRING_LITERAL: "ok" at [8, 8]
RPAREN: ) at [8, 12]
SEMICOLON: ; at [8, 13]
RBRACE: } at [9, 0]
RBRACE: } at [10, 0]
FUNCTION: function at [12, 0]
IDENTIFIER: g at [12, 9]
LPAREN: ( at [12, 10]
RPAREN: ) at [12, 11]
LBRACE: { at [12, 13]
LET: let at [13, 2]
IDENTIFIER: x at [13, 6]
EQUAL: = at [13, 8]
FLOAT_LITERAL: 3 at [13, 10]
SEMICOLON: ; at [13, 11]
RBRACE: } at [14, 0]
EOF:  at [15, 0]
