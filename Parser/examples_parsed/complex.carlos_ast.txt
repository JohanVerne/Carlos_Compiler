Program:
  VarDecl (CONST):
    Identifier: languageName
    Value:
      Literal: "Carlos"
  TypeDecl: Vector
    Fields:
      Field: x : {'type': 'primitive', 'name': 'float'}
      Field: y : {'type': 'primitive', 'name': 'float'}
      Field: label : {'type': 'primitive', 'name': 'string'}
  FunDecl: newVector
    Parameters:
      Param: x : {'type': 'primitive', 'name': 'float'}
      Param: y : {'type': 'primitive', 'name': 'float'}
      Param: label : {'type': 'primitive', 'name': 'string'}
    Return Type: {'type': 'id', 'name': 'Vector'}
    Body:
      Block:
        Call: return
          Arguments:
            Call:
              Callee:
                Identifier: Vector
              Arguments:
                Identifier: x
                Identifier: y
                Identifier: label
  FunDecl: magnitude
    Parameters:
      Param: v : {'type': 'id', 'name': 'Vector'}
    Return Type: {'type': 'primitive', 'name': 'float'}
    Body:
      Block:
        Call: return
          Arguments:
            Call: sqrt
              Arguments:
                BinaryOp (PLUS):
                  Left:
                    BinaryOp (MULTIPLICATION):
                      Left:
                        MemberAccess (.):
                          Object:
                            Identifier: v
                          Member: x
                      Right:
                        MemberAccess (.):
                          Object:
                            Identifier: v
                          Member: x
                  Right:
                    BinaryOp (MULTIPLICATION):
                      Left:
                        MemberAccess (.):
                          Object:
                            Identifier: v
                          Member: y
                      Right:
                        MemberAccess (.):
                          Object:
                            Identifier: v
                          Member: y
  FunDecl: scaleVector
    Parameters:
      Param: v : {'type': 'id', 'name': 'Vector'}
      Param: factor : {'type': 'primitive', 'name': 'float'}
    Return Type: {'type': 'id', 'name': 'Vector'}
    Body:
      Block:
        VarDecl (LET):
          Identifier: newX
          Value:
            BinaryOp (MULTIPLICATION):
              Left:
                MemberAccess (.):
                  Object:
                    Identifier: v
                  Member: x
              Right:
                Identifier: factor
        VarDecl (LET):
          Identifier: newY
          Value:
            BinaryOp (MULTIPLICATION):
              Left:
                MemberAccess (.):
                  Object:
                    Identifier: v
                  Member: y
              Right:
                Identifier: factor
        Call: return
          Arguments:
            Call:
              Callee:
                Identifier: Vector
              Arguments:
                Identifier: newX
                Identifier: newY
                MemberAccess (.):
                  Object:
                    Identifier: v
                  Member: label
  FunDecl: testOptional
    Parameters:
      Param: flag : {'type': 'primitive', 'name': 'boolean'}
    Return Type: {'type': 'optional', 'base_type': 'int'}
    Body:
      Block:
        IfStmt:
          Condition:
            Identifier: flag
          Then Block:
            Block:
              Call: return
                Arguments:
                  UnaryOp (SOME):
                    Operand:
                      Literal: 42
          Else Block:
            Block:
              Call: return
                Arguments:
                  Call: emptyopt
                    Arguments:
                      Dictionary: {'type': 'primitive', 'name': 'int'}
  FunDecl: processArray
    Parameters:
      Param: a : {'type': 'array', 'inner_type': {'type': 'primitive', 'name': 'int'}}
    Return Type: {'type': 'primitive', 'name': 'int'}
    Body:
      Block:
        VarDecl (LET):
          Identifier: sum
          Value:
            Literal: 0
        LoopStmt (for):
          Condition:
            Identifier: i
            Iterable:
              Literal: 0
            Range End:
              UnaryOp (LENGTH):
                Operand:
                  Identifier: a
          Body:
            Block:
              Call: assign
                Arguments:
                  Identifier: sum
                  BinaryOp (PLUS):
                    Left:
                      Identifier: sum
                    Right:
                      ArrayAccess:
                        Array:
                          Identifier: a
                        Index:
                          Identifier: i
        Call: return
          Arguments:
            Identifier: sum
  FunDecl: stringFun
    Parameters:
      Param: s : {'type': 'primitive', 'name': 'string'}
    Return Type: {'type': 'primitive', 'name': 'string'}
    Body:
      Block:
        VarDecl (LET):
          Identifier: result
          Value:
            Literal: ""
        VarDecl (LET):
          Identifier: cp
          Value:
            Call: codepoints
              Arguments:
                Identifier: s
        LoopStmt (for):
          Condition:
            Identifier: cpVal
            Iterable:
              Identifier: cp
          Body:
            Block:
              Call: assign
                Arguments:
                  Identifier: result
                  BinaryOp (PLUS):
                    Left:
                      Identifier: result
                    Right:
                      Call: conditional
                        Arguments:
                          BinaryOp (IS_EQUAL):
                            Left:
                              BinaryOp (MODULO):
                                Left:
                                  Identifier: cpVal
                                Right:
                                  Literal: 2
                            Right:
                              Literal: 0
                          Literal: "E"
                          Literal: "O"
        Call: return
          Arguments:
            Identifier: result
  FunDecl: complexCondition
    Parameters:
      Param: a : {'type': 'primitive', 'name': 'int'}
      Param: b : {'type': 'primitive', 'name': 'int'}
    Return Type: {'type': 'primitive', 'name': 'boolean'}
    Body:
      Block:
        IfStmt:
          Condition:
            BinaryOp (LOGICAL_AND):
              Left:
                BinaryOp (LESS_THAN):
                  Left:
                    Identifier: a
                  Right:
                    Identifier: b
              Right:
                BinaryOp (IS_NOT_EQUAL):
                  Left:
                    Identifier: a
                  Right:
                    Literal: 0
          Then Block:
            Block:
              Call: return
                Arguments:
                  Literal: true
          Else Block:
            IfStmt:
              Condition:
                BinaryOp (IS_EQUAL):
                  Left:
                    Identifier: a
                  Right:
                    Identifier: b
              Then Block:
                Block:
                  Call: return
                    Arguments:
                      Literal: false
              Else Block:
                Block:
                  Call: return
                    Arguments:
                      UnaryOp (NOT):
                        Operand:
                          Literal: false
  FunDecl: loopDemo
    Parameters:
      Param: n : {'type': 'primitive', 'name': 'int'}
    Return Type: {'type': 'primitive', 'name': 'void'}
    Body:
      Block:
        VarDecl (LET):
          Identifier: counter
          Value:
            Identifier: n
        LoopStmt (while):
          Condition:
            BinaryOp (GREATER_THAN):
              Left:
                Identifier: counter
              Right:
                Literal: 0
          Body:
            Block:
              Call: print
                Arguments:
                  BinaryOp (PLUS):
                    Left:
                      Literal: "Counter: "
                    Right:
                      Identifier: counter
              Call: DECREMENT
                Arguments:
                  Identifier: counter
        LoopStmt (repeat):
          Condition:
            Literal: 3
          Body:
            Block:
              Call: print
                Arguments:
                  Literal: "Repeat loop iteration"
  FunDecl: rangeDemo
    Parameters:
      Param: start : {'type': 'primitive', 'name': 'int'}
      Param: end : {'type': 'primitive', 'name': 'int'}
    Return Type: {'type': 'primitive', 'name': 'void'}
    Body:
      Block:
        LoopStmt (for):
          Condition:
            Identifier: i
            Iterable:
              Identifier: start
            Range End:
              Identifier: end
          Body:
            Block:
              IfStmt:
                Condition:
                  BinaryOp (IS_EQUAL):
                    Left:
                      BinaryOp (MODULO):
                        Left:
                          Identifier: i
                        Right:
                          Literal: 2
                    Right:
                      Literal: 0
                Then Block:
                  Block:
                    Call: print
                      Arguments:
                        BinaryOp (PLUS):
                          Left:
                            Literal: "Even: "
                          Right:
                            Identifier: i
                Else Block:
                  Block:
                    Call: print
                      Arguments:
                        BinaryOp (PLUS):
                          Left:
                            Literal: "Odd: "
                          Right:
                            Identifier: i
  FunDecl: branchDemo
    Parameters:
      Param: x : {'type': 'primitive', 'name': 'int'}
    Return Type: {'type': 'primitive', 'name': 'int'}
    Body:
      Block:
        IfStmt:
          Condition:
            BinaryOp (GREATER_THAN):
              Left:
                Identifier: x
              Right:
                Literal: 100
          Then Block:
            Block:
              Call: return
                Arguments:
                  BinaryOp (MINUS):
                    Left:
                      Identifier: x
                    Right:
                      Literal: 100
        Call: return
          Arguments:
            BinaryOp (PLUS):
              Left:
                Identifier: x
              Right:
                Literal: 100
  FunDecl: breakDemo
    Parameters:
      Param: arr : {'type': 'array', 'inner_type': {'type': 'primitive', 'name': 'int'}}
    Return Type: {'type': 'primitive', 'name': 'int'}
    Body:
      Block:
        VarDecl (LET):
          Identifier: total
          Value:
            Literal: 0
        LoopStmt (for):
          Condition:
            Identifier: x
            Iterable:
              Identifier: arr
          Body:
            Block:
              IfStmt:
                Condition:
                  BinaryOp (GREATER_THAN):
                    Left:
                      Identifier: x
                    Right:
                      Literal: 50
                Then Block:
                  Block:
                    Literal: break
              Call: assign
                Arguments:
                  Identifier: total
                  BinaryOp (PLUS):
                    Left:
                      Identifier: total
                    Right:
                      Identifier: x
        Call: return
          Arguments:
            Identifier: total
  FunDecl: bitwiseDemo
    Parameters:
      Param: x : {'type': 'primitive', 'name': 'int'}
      Param: y : {'type': 'primitive', 'name': 'int'}
    Return Type: {'type': 'primitive', 'name': 'int'}
    Body:
      Block:
        Call: return
          Arguments:
            BinaryOp (BITWISE_OR):
              Left:
                BinaryOp (BITWISE_AND):
                  Left:
                    BinaryOp (PLUS):
                      Left:
                        BinaryOp (LEFT_SHIFT):
                          Left:
                            Identifier: x
                          Right:
                            Literal: 1
                      Right:
                        BinaryOp (RIGHT_SHIFT):
                          Left:
                            Identifier: y
                          Right:
                            Literal: 1
                  Right:
                    BinaryOp (BITWISE_XOR):
                      Left:
                        Identifier: x
                      Right:
                        Identifier: y
              Right:
                BinaryOp (BITWISE_AND):
                  Left:
                    Identifier: x
                  Right:
                    Identifier: y
  Block:
    Call: print
      Arguments:
        BinaryOp (PLUS):
          Left:
            Literal: "Testing language: "
          Right:
            Identifier: languageName
    VarDecl (LET):
      Identifier: vec
      Value:
        Call:
          Callee:
            Identifier: newVector
          Arguments:
            Literal: 3.0
            Literal: 4.0
            Literal: "A"
    Call: print
      Arguments:
        BinaryOp (PLUS):
          Left:
            Literal: "Vector magnitude: "
          Right:
            Call:
              Callee:
                Identifier: magnitude
              Arguments:
                Identifier: vec
    VarDecl (LET):
      Identifier: scaled
      Value:
        Call:
          Callee:
            Identifier: scaleVector
          Arguments:
            Identifier: vec
            Literal: 2.5
    Call: print
      Arguments:
        BinaryOp (PLUS):
          Left:
            Literal: "Scaled vector magnitude: "
          Right:
            Call:
              Callee:
                Identifier: magnitude
              Arguments:
                Identifier: scaled
    VarDecl (LET):
      Identifier: opt
      Value:
        Call:
          Callee:
            Identifier: testOptional
          Arguments:
            Literal: true
    Call: print
      Arguments:
        BinaryOp (PLUS):
          Left:
            Literal: "Optional value: "
          Right:
            Call: unwrapelse
              Arguments:
                Identifier: opt
                Literal: -1
    VarDecl (LET):
      Identifier: arrSum
      Value:
        Call:
          Callee:
            Identifier: processArray
          Arguments:
            Call: array
              Arguments:
                Literal: 10
                Literal: 20
                Literal: 30
                Literal: 40
    Call: print
      Arguments:
        BinaryOp (PLUS):
          Left:
            Literal: "Sum of array: "
          Right:
            Identifier: arrSum
    Call: print
      Arguments:
        Call:
          Callee:
            Identifier: stringFun
          Arguments:
            Literal: "Hello, 世界"
    Call:
      Callee:
        Identifier: loopDemo
      Arguments:
        Literal: 5
    Call:
      Callee:
        Identifier: rangeDemo
      Arguments:
        Literal: 1
        Literal: 10
    Call: print
      Arguments:
        BinaryOp (PLUS):
          Left:
            Literal: "Branch demo: "
          Right:
            Call:
              Callee:
                Identifier: branchDemo
              Arguments:
                Literal: 50
    Call: print
      Arguments:
        BinaryOp (PLUS):
          Left:
            Literal: "Break demo: "
          Right:
            Call:
              Callee:
                Identifier: breakDemo
              Arguments:
                Call: array
                  Arguments:
                    Literal: 5
                    Literal: 10
                    Literal: 55
                    Literal: 20
    Call: print
      Arguments:
        BinaryOp (PLUS):
          Left:
            Literal: "Bitwise demo: "
          Right:
            Call:
              Callee:
                Identifier: bitwiseDemo
              Arguments:
                Literal: 12
                Literal: 5
